@{
    ViewData["Title"] = "Home Page";
}


<div class="row">
    <div class="col-md-3">
        
    </div>
    <div class="col-md-3">
         
         
    </div>
    <div class="col-md-3">
         
    </div>
    <div class="col-md-3">
     
    </div>
</div>

@*<head>
        <title>Quickstart for MSAL JS</title>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/bluebird/3.3.4/bluebird.min.js"></script>
        <script src="https://secure.aadcdn.microsoftonline-p.com/lib/1.0.0/js/msal.js"></script>
    </head>


    <div class="container">
        <div class="leftContainer">
            <p id="WelcomeMessage">Welcome to the Microsoft Authentication Library For Javascript Quickstart</p>
            <button id="SignIn" onclick="signIn()">Sign In</button>
        </div>
        <div class="rightContainer">
            <pre id="json"></pre>
        </div>
        <button id="call" onclick="call()">call</button>

    </div>
    <script>

        function call() {
            var xmlHttp = new XMLHttpRequest();
            xmlHttp.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    JSON.stringify((JSON.parse(this.responseText)), null, 2);
                    console.log(this.responseText);
                }
            }
            xmlHttp.open("GET", "https://localhost:44361/api/values", true); // true for asynchronous
            xmlHttp.send();
        }
        var msalConfig = {
            auth: {
                clientId: '0f1c1a2e-a3dc-4cac-80c6-9403c4f03400', //This is your client ID
                authority: "https://login.microsoftonline.com/9e68a0dc-b9b9-4e20-936b-4eff2572e048" //This is your tenant info
            },
            cache: {
                cacheLocation: "localStorage",
                storeAuthStateInCookie: true
            }
        };

        var graphConfig = {
            graphMeEndpoint: "https://graph.microsoft.com/v1.0/me/"
        };

        // create a request object for login or token request calls
        // In scenarios with incremental consent, the request object can be further customized
        var requestObj = {
            scopes: ["user.read"]
        };

        var myMSALObj = new Msal.UserAgentApplication(msalConfig);

        // Register Callbacks for redirect flow
        // myMSALObj.handleRedirectCallbacks(acquireTokenRedirectCallBack, acquireTokenErrorRedirectCallBack);
        myMSALObj.handleRedirectCallback(authRedirectCallBack);

        function signIn() {
            myMSALObj.loginPopup(requestObj).then(function (loginResponse) {
                //Successful login
                console.log('Login sucess npm se');
                showWelcomeMessage();
                //Call MS Graph using the token in the response
                acquireTokenPopupAndCallMSGraph();
            }).catch(function (error) {
                //Please check the console for errors
                console.log(error);
            });
        }

        function signOut() {
            myMSALObj.logout();
        }

        function acquireTokenPopupAndCallMSGraph() {
            //Always start with acquireTokenSilent to obtain a token in the signed in user from cache
            myMSALObj.acquireTokenSilent(requestObj).then(function (tokenResponse) {
                console.log('called' + tokenResponse);
                callMSGraph(graphConfig.graphMeEndpoint, tokenResponse.accessToken, graphAPICallback);
            }).catch(function (error) {
                console.log(error);
                // Upon acquireTokenSilent failure (due to consent or interaction or login required ONLY)
                // Call acquireTokenPopup(popup window)
                if (requiresInteraction(error.errorCode)) {
                    myMSALObj.acquireTokenPopup(requestObj).then(function (tokenResponse) {
                        callMSGraph(graphConfig.graphMeEndpoint, tokenResponse.accessToken, graphAPICallback);
                    }).catch(function (error) {
                        console.log(error);
                    });
                }
            });
        }

        function callMSGraph(theUrl, accessToken, callback) {
            console.log('theUrl ' + theUrl);
            console.log('accessToken ' + accessToken);
            console.log('callback ' + callback);
            var xmlHttp = new XMLHttpRequest();
            xmlHttp.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200)
                    callback(JSON.parse(this.responseText));
            }
            xmlHttp.open("GET", theUrl, true); // true for asynchronous
            xmlHttp.setRequestHeader('Authorization', 'Bearer ' + accessToken);
            xmlHttp.send();
        }

        function graphAPICallback(data) {
            document.getElementById("json").innerHTML = JSON.stringify(data, null, 2);
        }

        function showWelcomeMessage() {
            var divWelcome = document.getElementById('WelcomeMessage');
            divWelcome.innerHTML = "Welcome " + myMSALObj.getAccount().userName + " to Microsoft Graph API";
            var loginbutton = document.getElementById('SignIn');
            loginbutton.innerHTML = 'Sign Out';
            loginbutton.setAttribute('onclick', 'signOut();');
        }

        //This function can be removed if you do not need to support IE
        function acquireTokenRedirectAndCallMSGraph() {
            //Always start with acquireTokenSilent to obtain a token in the signed in user from cache
            myMSALObj.acquireTokenSilent(requestObj).then(function (tokenResponse) {
                callMSGraph(graphConfig.graphMeEndpoint, tokenResponse.accessToken, graphAPICallback);
            }).catch(function (error) {
                console.log(error);
                // Upon acquireTokenSilent failure (due to consent or interaction or login required ONLY)
                // Call acquireTokenRedirect
                if (requiresInteraction(error.errorCode)) {
                    myMSALObj.acquireTokenRedirect(requestObj);
                }
            });
        }

        function authRedirectCallBack(error, response) {
            if (error) {
                console.log(error);
            } else {
                if (response.tokenType === "access_token") {
                    callMSGraph(graphConfig.graphMeEndpoint, response.accessToken, graphAPICallback);
                } else {
                    console.log("token type is:" + response.tokenType);
                }
            }
        }

        function requiresInteraction(errorCode) {
            if (!errorCode || !errorCode.length) {
                return false;
            }
            return errorCode === "consent_required" ||
                errorCode === "interaction_required" ||
                errorCode === "login_required";
        }

        // Browser check variables
        var ua = window.navigator.userAgent;
        var msie = ua.indexOf('MSIE ');
        var msie11 = ua.indexOf('Trident/');
        var msedge = ua.indexOf('Edge/');
        var isIE = msie > 0 || msie11 > 0;
        var isEdge = msedge > 0;

        //If you support IE, our recommendation is that you sign-in using Redirect APIs
        //If you as a developer are testing using Edge InPrivate mode, please add "isEdge" to the if check

        // can change this to default an experience outside browser use
        var loginType = isIE ? "REDIRECT" : "POPUP";

        // runs on page load, change config to try different login types to see what is best for your application
        if (loginType === 'POPUP') {
            if (myMSALObj.getAccount()) {// avoid duplicate code execution on page load in case of iframe and popup window.
                showWelcomeMessage();
                acquireTokenPopupAndCallMSGraph();
            }
        }
        else if (loginType === 'REDIRECT') {
            document.getElementById("SignIn").onclick = function () {
                myMSALObj.loginRedirect(requestObj);
            };

            if (myMSALObj.getAccount() && !myMSALObj.isCallback(window.location.hash)) {// avoid duplicate code execution on page load in case of iframe and popup window.
                showWelcomeMessage();
                acquireTokenRedirectAndCallMSGraph();
            }
        } else {
            console.error('Please set a valid login type');
        }
    </script>
*@

<head>
    <title>Quickstart for MSAL JS</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bluebird/3.3.4/bluebird.min.js"></script>
    <script src="https://secure.aadcdn.microsoftonline-p.com/lib/1.0.0/js/msal.js"></script>
</head>


<div class="container">
    <div class="leftContainer">
        <p id="WelcomeMessage">Welcome to the Microsoft Authentication Library For Javascript Quickstart</p>
        <p>WebApplication1 port 44361</p>
        <button id="SignIn" onclick="signIn()">Sign In</button>
    </div>
    <div class="rightContainer">
        <pre id="json"></pre>
        <pre id="callAnn"></pre>
    </div>
    <button id="call" onclick="CallAAD()">call api/values Auth</button>
    <div>
        <button id="call" onclick="callAnn()">call api/values/5 </button>
    </div>
</div>
<button id="call" onclick="call()">call api/values Send token</button>
<div>
</div>
<script type="text/javascript">
    //1 expired value for web26, 2, not from web26 3 valid token
    var accessToken_p = "eyJ0eXAiOiJKV1QiLCJub25jZSI6Inhzenpwcm4tVW42OWNYM0dEM05sMzMwb3AtUlhEUlJVSzNBX05BT3EtY3MiLCJhbGciOiJSUzI1NiIsIng1dCI6IkJCOENlRlZxeWFHckdOdWVoSklpTDRkZmp6dyIsImtpZCI6IkJCOENlRlZxeWFHckdOdWVoSklpTDRkZmp6dyJ9.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwMDAiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC85ZTY4YTBkYy1iOWI5LTRlMjAtOTM2Yi00ZWZmMjU3MmUwNDgvIiwiaWF0IjoxNTc1MzA4NTA4LCJuYmYiOjE1NzUzMDg1MDgsImV4cCI6MTU3NTMxMjQwOCwiYWNjdCI6MCwiYWNyIjoiMSIsImFpbyI6IkFVUUF1LzhOQUFBQUJwdXNJTmtvaHlVVXVXY2xmKzkyU2FDcHFMaSsrMjZDdU4zdjNlY1E5ZFF0RVhwUkxsY1orVTRZYU9WMzhnTUpMa3gzb2VmVlhOZ2Z6STdoWUtlUjFRPT0iLCJhbHRzZWNpZCI6IjE6bGl2ZS5jb206MDAwNjQwMDBGRTZDMDM5NSIsImFtciI6WyJwd2QiXSwiYXBwX2Rpc3BsYXluYW1lIjoiUHJhdmVlbiIsImFwcGlkIjoiMGYxYzFhMmUtYTNkYy00Y2FjLTgwYzYtOTQwM2M0ZjAzNDAwIiwiYXBwaWRhY3IiOiIwIiwiZW1haWwiOiJwcmF2ZWVuLmF6QGhvdG1haWwuY29tIiwiZmFtaWx5X25hbWUiOiJBWiIsImdpdmVuX25hbWUiOiJQcmF2ZWVuIiwiaWRwIjoibGl2ZS5jb20iLCJpcGFkZHIiOiIxODIuNzAuOTUuODUiLCJuYW1lIjoiUHJhdmVlbiBBWiIsIm9pZCI6Ijk5MmVmYTY3LTA3ZmYtNDhjZS05YmRkLTVkZTQ0NDAwNWMzMyIsInBsYXRmIjoiMyIsInB1aWQiOiIxMDAzMjAwMDUwREYzQjVGIiwic2NwIjoiRGlyZWN0b3J5LlJlYWQuQWxsIGVtYWlsIG9wZW5pZCBwcm9maWxlIFVzZXIuUmVhZCBVc2VyLlJlYWRCYXNpYy5BbGwiLCJzdWIiOiJSX3JMS3lLX2VFTlVBd3VBV0Z0WG0zaHlJZHNmZkxMT3RIVy1aNU95a2tZIiwidGlkIjoiOWU2OGEwZGMtYjliOS00ZTIwLTkzNmItNGVmZjI1NzJlMDQ4IiwidW5pcXVlX25hbWUiOiJsaXZlLmNvbSNwcmF2ZWVuLmF6QGhvdG1haWwuY29tIiwidXRpIjoiVVVvWi04VDN3RW1zRDBCSlhSSmtBUSIsInZlciI6IjEuMCIsInhtc19zdCI6eyJzdWIiOiJ5MGZZX1Fpa1Y3YldVMzZHVno1MUZ2STU1ZXhRNFVodDNmNHpNd250c3BjIn0sInhtc190Y2R0IjoxNTYzMTgwMTgyfQ.JdIgz7qMWverD1XrywwB10PrnHWVRkCMXmWzzBfNxcbhim6hjr8cpVe9MFNJYdkCFmSxBgFpVREuNq8PTIOhI6bYHsBwJYbnCIci_ur8eB9wl6gOqbKAUS_rEb4CYWWthVcua0hy_2sZlggGDCaTABK-2mxALSxY1cgADnxs-jOn8HLGW4VFWiH2IZqXS1NdVtFn3VkKSI-24B74Zlhy-0fhCc8UYwia0Ojkw4tn275-OXbCWOrpxGVXu0cPePNMWrGwx254i29ynb77XfL4jljsgbQdoXbkNz-R5sbGiJLrTg0cdyLcvFXedW68wNP7bb4Wzb2UeKQ5WMnpfp0ALQ";
    function call() {
        ajx();
    }
    function ajx() {
        var tkn = 'Bearer ' + document.getElementById('callAnn').innerHTML;
        console.log(tkn);
        $.ajax({
            url: "https://localhost:44355/api/values",
            headers: { "Authorization": tkn }
        }).done(function (data) {
            console.log(data);
            $("#callAnn").html(data);
        })
            .fail(function (jqXHR, textStatus) {
                alert("error: " + textStatus);
            });
    }


    function callAnn() {
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                console.log(this.responseText);
                $("#callAnn").html(this.responseText);
            }
        }
        xmlHttp.open("GET", "https://localhost:44355/api/values/1", true); // true for asynchronous
        xmlHttp.send();
    }
    var msalConfig = {
        auth: {
            clientId: '5cb65f16-e724-473b-a60b-72f51c582bcf',//'0f1c1a2e-a3dc-4cac-80c6-9403c4f03400', //This is your client ID
            authority: "https://login.microsoftonline.com/9e68a0dc-b9b9-4e20-936b-4eff2572e048" //This is your tenant info
        },
        cache: {
            cacheLocation: "localStorage",
            storeAuthStateInCookie: true
        }
    };

    var graphConfig = {
        graphMeEndpoint: "https://graph.microsoft.com/v1.0/me"
    };
    var requestObj = {
        scopes: ["user.read"]
    };

    var myMSALObj = new Msal.UserAgentApplication(msalConfig);
    // myMSALObj.handleRedirectCallbacks(acquireTokenRedirectCallBack, acquireTokenErrorRedirectCallBack);
    myMSALObj.handleRedirectCallback(authRedirectCallBack);

    function signIn() {
        myMSALObj.loginPopup(requestObj).then(function (loginResponse) {
            console.log('Login sucess npm se');
            showWelcomeMessage();
            //Call MS Graph using the token in the response
            acquireTokenPopupAndCallMSGraph();
        }).catch(function (error) {
            //Please check the console for errors
            console.log(error);
        });
    }
    function signOut() {
        myMSALObj.logout();
    }

    function acquireTokenPopupAndCallMSGraph() {
        //Always start with acquireTokenSilent to obtain a token in the signed in user from cache
        myMSALObj.acquireTokenSilent(requestObj).then(function (tokenResponse) {
            console.log('called' + tokenResponse);
            callMSGraph(graphConfig.graphMeEndpoint, tokenResponse.accessToken, graphAPICallback);
        }).catch(function (error) {
            console.log(error);
            if (requiresInteraction(error.errorCode)) {
                myMSALObj.acquireTokenPopup(requestObj).then(function (tokenResponse) {
                    callMSGraph(graphConfig.graphMeEndpoint, tokenResponse.accessToken, graphAPICallback);
                }).catch(function (error) {
                    console.log(error);
                });
            }
        });
    }

    function callMSGraph(theUrl, accessToken, callback) {
        console.log('theUrl ' + theUrl);
        console.log('accessToken ' + accessToken);
        document.getElementById('callAnn').innerHTML = accessToken;
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200)
                callback(JSON.parse(this.responseText));
        }
        xmlHttp.open("GET", theUrl, true); // true for asynchronous
        xmlHttp.setRequestHeader('Authorization', 'Bearer ' + accessToken);
        xmlHttp.send();
    }

    function graphAPICallback(data) {
        document.getElementById("json").innerHTML = JSON.stringify(data, null, 2);
    }

    function showWelcomeMessage() {
        var divWelcome = document.getElementById('WelcomeMessage');
        divWelcome.innerHTML = "Welcome " + myMSALObj.getAccount().userName + " to Microsoft Graph API";
        var loginbutton = document.getElementById('SignIn');
        loginbutton.innerHTML = 'Sign Out';
        loginbutton.setAttribute('onclick', 'signOut();');
    }

    //This function can be removed if you do not need to support IE
    function acquireTokenRedirectAndCallMSGraph() {
        //Always start with acquireTokenSilent to obtain a token in the signed in user from cache
        myMSALObj.acquireTokenSilent(requestObj).then(function (tokenResponse) {
            callMSGraph(graphConfig.graphMeEndpoint, tokenResponse.accessToken, graphAPICallback);
        }).catch(function (error) {
            console.log(error);
            // Upon acquireTokenSilent failure (due to consent or interaction or login required ONLY)
            // Call acquireTokenRedirect
            if (requiresInteraction(error.errorCode)) {
                myMSALObj.acquireTokenRedirect(requestObj);
            }
        });
    }

    function authRedirectCallBack(error, response) {
        if (error) {
            console.log(error);
        } else {
            if (response.tokenType === "access_token") {
                callMSGraph(graphConfig.graphMeEndpoint, response.accessToken, graphAPICallback);
            } else {
                console.log("token type is:" + response.tokenType);
            }
        }
    }

    function requiresInteraction(errorCode) {
        if (!errorCode || !errorCode.length) {
            return false;
        }
        return errorCode === "consent_required" ||
            errorCode === "interaction_required" ||
            errorCode === "login_required";
    }

    // Browser check variables
    var ua = window.navigator.userAgent;
    var msie = ua.indexOf('MSIE ');
    var msie11 = ua.indexOf('Trident/');
    var msedge = ua.indexOf('Edge/');
    var isIE = msie > 0 || msie11 > 0;
    var isEdge = msedge > 0;

    //If you support IE, our recommendation is that you sign-in using Redirect APIs
    //If you as a developer are testing using Edge InPrivate mode, please add "isEdge" to the if check

    // can change this to default an experience outside browser use
    var loginType = isIE ? "REDIRECT" : "POPUP";

    // runs on page load, change config to try different login types to see what is best for your application
    if (loginType === 'POPUP') {
        if (myMSALObj.getAccount()) {// avoid duplicate code execution on page load in case of iframe and popup window.
            showWelcomeMessage();
            acquireTokenPopupAndCallMSGraph();
        }
    }
    else if (loginType === 'REDIRECT') {
        document.getElementById("SignIn").onclick = function () {
            myMSALObj.loginRedirect(requestObj);
        };

        if (myMSALObj.getAccount() && !myMSALObj.isCallback(window.location.hash)) {// avoid duplicate code execution on page load in case of iframe and popup window.
            showWelcomeMessage();
            acquireTokenRedirectAndCallMSGraph();
        }
    } else {
        console.error('Please set a valid login type');
    }
</script>
